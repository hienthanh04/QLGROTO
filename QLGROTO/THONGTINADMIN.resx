<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAEhQAAAEAIAAYBgAAFgAAACgAAAASAAAAKAAAAAEAIAAAAAAAoAUAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAHEx0AARzqwAEbaMAA1yMBwRllnQGY5TYBFWAXwMsSwIFR20ABUZsAMO7
        vwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0RWIAA3y4AAN1rgACaqAOBXCmjBOFw/Ygmt7/EHKn7wRO
        dXcDOVoHBUBjAAY+XwB7e3sAAAAAAAAAAAAAAAAAAAAAAAAAAAAEgL0AA3u3AAJzqxAFerWdF5LU/ymt
        +f8rsf7/KKjy/xR1qvoGRmuGBDBMBwY5WAAGNFIAAAAAAAAAAAAAAAAAAAAAAAd+ugAFfrsAA3WwCASB
        vpQXl9v/Kq/8/yux/v8rsf//K7H+/ymq9f8VcKP6BTxceQMPIgIHMk4ACCpDAAAAAAAAAAAAE2eaAAl2
        sAAAw/8AA4XFcBOX3Psqr/v/K7H+/yux//8rsf//K7H//yux/v8op/D/EV+M8gQwS1MEOFUAAMzqAFhS
        XQAAAAAAA5PYAAKO0gABico4DJXa5yes+P8rsf7/K7H//yux//8rsf//K7H//yux//8rsf7/JJnd/wxG
        adMEIzkhBitEAAcjOQAXcqkABorMAASFxgkFk9iuHqbx/yux/v8rsf//K7H//yux//8rsf//K7H//yux
        //8rsf7/K7H9/xt4rv8HLUaNAAAAAQgjOAAEmeIAApjgAAGT2UwPn+j2Kq/9/yux//8rsf//K7H//yux
        //8rsf//K7H//yux//8rsf//K7H+/yik7P8PSGvmBBstLgYkOQAJjtIAB4jKBQSb46oeqfX/LLH//yux
        //8rsf//K7H//yux//8rsf//K7H//yux//8rsf//K7H//yux/v8bc6f/BiI3gwY7WQAEm+QAApniLAui
        7egor/z/K7H//yux//8rsf//K7H//yux//8rsf//K7H//yux//8rsf//K7H//yux/v8lmdz/CzNOzQQP
        HBcApfIAAZ/paBOo9P8rsf7/K7H//yux//8rsf//K7H//yux//8rsf//K7H//yux//8rsf//K7H//yux
        /v8qrPb/Ek1x8wUSIEwfaZ4BAqPvoBys+f8ssf//K7H//yux//8rsf//K7H//yux//8rsf//K7H//yux
        //8rsf//K7H//yux/v8rsf3/GWiX/wYWJogFm+QRBabyyCKu+/8rsf//K7H//yux//8rsf//K7H//yux
        //8rsf//K7H//yux//8rsf//K7H//yux//8rsv7/H3+3/wgcLroDoeslB6j13yav/f8rsf//K7H//yux
        //8rsf//K7H//yux//8rsf//K7H//yux//8rsf//K7H//yux//8rsf7/I47N/wojN90Co+43Can37Ciw
        /f8rsf//K7H//yux//8rsf//K7H//yux//8rsf//K7H//yux//8rsf//K7H//yux//8rsf3/JZfa/wso
        PvECpPBCCqr48iiw/v8rsf//K7H//yux//8rsf//K7H//yux//8rsf//K7H//yux//8rsf//K7H//yux
        //8rsf3/Jpvf/wwrQvsDpfJGCqr48ymw/v8rsf7/K7H//yux//8rsf//K7H//yux//8rsf//K7H//yux
        //8rsf//K7H+/yuw/v8rsf7/Jp3i/wwrQv0Uqe5EBqj18B2r+P8mrvr/KrD9/yux/v8rsf7/K7H+/yux
        /v8rsf//K7H+/yux/v8rsf7/K6/7/ymp8/8lnOD/HHSp/woiNfdxxOQfA6HsXwWc5ZwKmeDIEJjd5RaY
        3vUbmuD8Hpzh/yCc4f8gmt7/H5XX/x2Ny/4af7n5Fm2f7hFWf9oMPVy5CCU6igcXJ1b89ucTAKb6ACAA
        AAEChMMSAoG/LQN7t00Edq5qBnCmfwdqnYsIYpKNCFiEhQZMc3QFP2BaBDBLPQIfNCABCRYJCjtWAAcY
        KAD+D8AA/AfAAPgDwADwAcAA8AHAAOAAwADAAEAAwABAAIAAQACAAAAAgAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAQADAAA==
</value>
  </data>
</root>